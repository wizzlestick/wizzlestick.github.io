<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wizzlestick.github.io/"/>
  <updated>2018-07-15T10:34:30.987Z</updated>
  <id>http://wizzlestick.github.io/</id>
  
  <author>
    <name>Thea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://wizzlestick.github.io/2018/07/15/Kali-Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://wizzlestick.github.io/2018/07/15/Kali-Linux安装配置和优化/</id>
    <published>2018-07-15T09:35:58.738Z</published>
    <updated>2018-07-15T10:34:30.987Z</updated>
    
    <content type="html"><![CDATA[<p>—)<br>title: Kali Linux安装配置和优化<br>date: 2018-07-15 17:35:58</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>(一)<br><a id="more"></a></p><h1 id="渗透测试和Kali-Linux介绍"><a href="#渗透测试和Kali-Linux介绍" class="headerlink" title="渗透测试和Kali Linux介绍"></a>渗透测试和Kali Linux介绍</h1><h2 id="渗透测试简介"><a href="#渗透测试简介" class="headerlink" title="渗透测试简介"></a>渗透测试简介</h2><h3 id="渗透测试定义"><a href="#渗透测试定义" class="headerlink" title="渗透测试定义"></a>渗透测试定义</h3><pre><code>1.尝试挫败安全防御机制,发现系统安全弱点(从攻击者的角度进行)2.从攻击者的角度思考,测量安全防护有效性3.证明安全问题的存在,而非破坏</code></pre><h3 id="渗透测试标准"><a href="#渗透测试标准" class="headerlink" title="渗透测试标准"></a>渗透测试标准</h3><p> <a href="http://www.pentest-standard.org./index.php/Main_Page" target="_blank" rel="noopener">PETS</a></p><h4 id="渗透测试基本过程"><a href="#渗透测试基本过程" class="headerlink" title="渗透测试基本过程"></a>渗透测试基本过程</h4><pre><code>1.前期交互阶段(渗透工作员和客户商量好相关工作要求以及人力时间要求等)2.情报收集阶段(渗透工作员确定工作后对目标系统进行搜集相关的情报)3.威胁建模阶段(从搜集到的信息中确定部分最高效快捷能够渗透进入系统的途径)4.漏洞分析阶段(查看目标服务器是否已经有公开的漏洞并是否有所利用,可能会编写一些有针对性的漏洞攻击代码)5.渗透攻击阶段(当不成顺利的时候,需要重新从搜集新的情报开始)6.后渗透测试阶段(当渗透成功后,获得一台目标服务器的控制权之后,用这一台服务器,进一步向内网进行进一步的渗透)7.渗透测试报告(发现,利用,攻击,控制网络,以及如何修复避免被真正的黑客利用)</code></pre><h3 id="渗透测试误区"><a href="#渗透测试误区" class="headerlink" title="渗透测试误区"></a>渗透测试误区</h3><pre><code>有关扫描器:扫描器只能扫描到常见型技术性漏洞,对业务逻辑层面的漏洞是无能为力的eg:一个系统分经理和普通员工两个权限，现在普通员工登录可以查看经理级别才能有的操作,这就是逻辑层次的漏洞，安全扫描器是检测不到的所以,不能过分依赖扫描器!!!</code></pre><h2 id="Kali-Linux简介"><a href="#Kali-Linux简介" class="headerlink" title="Kali Linux简介"></a>Kali Linux简介</h2><pre><code>1.基于Debian的Linux发行版本2.前身是BackTrack,于2013年3月发布3.用于渗透测试和安全审计4.包含600+安全工具(逆性工程,电子取证等)5.FHS标准目录结构6.定制内核7.支持ARM和手机平台8.开源免费</code></pre><h3 id="Kali-Linux策略"><a href="#Kali-Linux策略" class="headerlink" title="Kali Linux策略"></a>Kali Linux策略</h3><pre><code>Root用户策略(直接用root权限登录使用,不用注册普通权限用户)网络服务策略(默认所有网络服务全是关闭,手动启动)更新升级策略</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;—)&lt;br&gt;title: Kali Linux安装配置和优化&lt;br&gt;date: 2018-07-15 17:35:58&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;&lt;p&gt;(一)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十一天了</title>
    <link href="http://wizzlestick.github.io/2018/07/10/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9%E4%BA%86/"/>
    <id>http://wizzlestick.github.io/2018/07/10/第十一天了/</id>
    <published>2018-07-10T06:35:59.000Z</published>
    <updated>2018-07-10T06:35:59.457Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第五天了</title>
    <link href="http://wizzlestick.github.io/2018/07/04/%E7%AC%AC%E4%BA%94%E5%A4%A9%E4%BA%86/"/>
    <id>http://wizzlestick.github.io/2018/07/04/第五天了/</id>
    <published>2018-07-04T07:25:47.000Z</published>
    <updated>2018-07-05T01:03:40.472Z</updated>
    
    <content type="html"><![CDATA[<p>有关SQL绕过和盲注<br><a id="more"></a></p><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关SQL绕过和盲注&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四天了</title>
    <link href="http://wizzlestick.github.io/2018/07/03/swapp%E8%B0%83%E8%AF%95/"/>
    <id>http://wizzlestick.github.io/2018/07/03/swapp调试/</id>
    <published>2018-07-03T07:20:57.000Z</published>
    <updated>2018-07-03T14:52:56.421Z</updated>
    
    <content type="html"><![CDATA[<p>swap调试以及有关栈的小知识<br><a id="more"></a></p><h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><pre><code>#include&lt;stdio.h&gt;void swap(int * aa, int * bb){    int cc = *aa;    *aa = *bb;    *bb = cc;}int main(){    int a = 1, b = 0;    swap(&amp;a, &amp;b);    printf(&quot;%d %d&quot;, a, b);    eturn 0;}</code></pre><h2 id="调试机制"><a href="#调试机制" class="headerlink" title="调试机制"></a>调试机制</h2><pre><code>逐语句，f11逐过程，f10区别：逐语句时，先从main函数开始，遇到被调用的函数时进入到函数内部按照语次进行     逐过程时，依然是从main函数开始，但是在遇到被调用函数时不会导函数内部去调试</code></pre><p>逐语句：</p><p><img src="https://i.imgur.com/pAAdq1r.png" alt=""></p><p>逐过程：</p><p><img src="https://i.imgur.com/PIAKfYj.png" alt=""></p><h1 id="代码过程分析"><a href="#代码过程分析" class="headerlink" title="代码过程分析"></a>代码过程分析</h1><p><img src="https://i.imgur.com/5LEdAht.png" alt=""></p><pre><code>注释：* aa表示定义的指针为aa     *aa表示取指针aa所指向的内容</code></pre><h1 id="栈使用情况分析（利用逐语句调试分析）"><a href="#栈使用情况分析（利用逐语句调试分析）" class="headerlink" title="栈使用情况分析（利用逐语句调试分析）"></a>栈使用情况分析（利用逐语句调试分析）</h1><pre><code>1.将变量a，b放入栈中2.为变量a，b赋值3.将指针变量* aa，* bb放入栈中，并标明其内存储的地址所表示的变量的情况，同时将c放入栈中4.将c的值赋成指针aa所指向的值5.交换指针aa和bb所表示的值</code></pre><p><img src="https://i.imgur.com/MtLT88a.jpg" alt=""></p><h1 id="小端序"><a href="#小端序" class="headerlink" title="小端序"></a>小端序</h1><pre><code>字节数据在计算机内存中存放的字节顺序定义：数据的高位字节存放在地址的高端 低位字节存放在地址低端     （数据是左边是高位，地址是右边是高位）eg：   int 12345678： 一个int占四个字节，在存储时需要用小端序，即存储位置要发生调换，   八个数字占四个字节，所以是两两在一个组，所以存储情况为78563412   char[] 0123： 一个char只占一个字节，一个字节存储两个十六进制位，存储时不用到小端序，   &apos;0&apos;的ASCII码表对应的是48,48的十六进制是30，所以存储情况31323300(00是字符串后的终止符\0）</code></pre><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><img src="https://i.imgur.com/LBsAJlI.png" alt=""></p><h2 id="栈的特性"><a href="#栈的特性" class="headerlink" title="栈的特性"></a>栈的特性</h2><pre><code>先进后出从高地址像低地址延伸</code></pre><h2 id="栈的作用"><a href="#栈的作用" class="headerlink" title="栈的作用"></a>栈的作用</h2><pre><code>暂时保存变量调用函数时传递参数保存函数返回地址</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swap调试以及有关栈的小知识&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>还依旧第三天</title>
    <link href="http://wizzlestick.github.io/2018/07/02/%E8%BF%98%E4%BE%9D%E6%97%A7%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://wizzlestick.github.io/2018/07/02/还依旧第三天/</id>
    <published>2018-07-02T10:08:27.000Z</published>
    <updated>2018-07-03T14:53:21.257Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql入门操作<br><a id="more"></a></p><h1 id="Mysql入门"><a href="#Mysql入门" class="headerlink" title="Mysql入门"></a>Mysql入门</h1><h2 id="数据库-gt-数据表-gt-字段-gt-数据"><a href="#数据库-gt-数据表-gt-字段-gt-数据" class="headerlink" title="数据库 -&gt; 数据表 -&gt; 字段 -&gt; 数据"></a>数据库 -&gt; 数据表 -&gt; 字段 -&gt; 数据</h2><p><img src="https://i.imgur.com/zH6Wl8q.png" alt=""></p><h2 id="Mysql启动"><a href="#Mysql启动" class="headerlink" title="Mysql启动"></a>Mysql启动</h2><p>1.Linux下启动：service mysql start</p><p>2.phpStudy启动：mysql –uroot –p</p><p><img src="https://i.imgur.com/NnP8UyB.png" alt=""></p><h2 id="Mysql命令简述"><a href="#Mysql命令简述" class="headerlink" title="Mysql命令简述"></a>Mysql命令简述</h2><p>1.创建一个新的数据库（例中名为switch）</p><p><em>mysql&gt;create database mysql;</em></p><p><img src="https://i.imgur.com/AzcJIDf.png" alt=""></p><p>2.进入数据库</p><p><em>mysql&gt;use mysql;</em></p><p><img src="https://i.imgur.com/XerNAq5.png" alt=""></p><p>3.创建数据库下的数据表（例中表名为hmbb）字段分别为id(int),username(varchar(20)),password(varchar(50))，id自增,且将id设为主键</p><p><em>mysql&gt;create table users(id int auto_increment,username varchar(20),password varchar(50));</em></p><p><img src="https://i.imgur.com/cHh1bX5.png" alt=""></p><p>4.查看数据库</p><p><em>mysql&gt;show databases;</em></p><p><img src="https://i.imgur.com/73KltJR.png" alt=""></p><p>5.查看当前数据库中的数据表</p><p><em>mysql&gt;show tables;</em></p><p><img src="https://i.imgur.com/gGpV4qn.png" alt=""></p><p>6.查看某张表的所有字段信息</p><p><em>mysql&gt;desc hmbb;</em></p><p><img src="https://i.imgur.com/KXgblLA.png" alt=""></p><p>7.插入数据</p><p><em>mysql&gt;insert into hmbb (username,password) values(“zz”,”zz_is_handsome”);</em></p><p><img src="https://i.imgur.com/isQa7zd.png" alt=""></p><p>8.查询数据</p><p><em>mysql&gt;select id,password from hmbb where username=“zz”;</em></p><p><img src="https://i.imgur.com/F27jbVv.png" alt=""></p><p>9.修改表名</p><p><em>mysql&gt;alter table hmbb rename to bbb;</em></p><p><img src="https://i.imgur.com/UZHeUlq.png" alt=""></p><p>10.删除数据库</p><p><em>mysql&gt;drop database switch;</em></p><p><img src="https://i.imgur.com/1e7jUU0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql入门操作&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第三天了</title>
    <link href="http://wizzlestick.github.io/2018/07/02/%E7%AC%AC%E4%B8%89%E5%A4%A9%E4%BA%86/"/>
    <id>http://wizzlestick.github.io/2018/07/02/第三天了/</id>
    <published>2018-07-02T07:27:11.000Z</published>
    <updated>2018-07-03T09:22:01.112Z</updated>
    
    <content type="html"><![CDATA[<p>密码爆破<br><a id="more"></a></p><h1 id="密码爆破（学姐的例题）"><a href="#密码爆破（学姐的例题）" class="headerlink" title="密码爆破（学姐的例题）"></a>密码爆破（学姐的例题）</h1><p>1.页面右键，查看源代码</p><p><img src="https://i.imgur.com/TIHkRhi.png" alt=""></p><p>2.复制代码最后的password.txt至原页面网址root/后部分得到所有可能的密码页面</p><p><img src="https://i.imgur.com/O23kX6y.png" alt=""></p><p>3.复制所有密码并保存至新的txt文档中</p><p><img src="https://i.imgur.com/MskqDhl.png" alt=""></p><p>4.返回登录页面，打开拦截，任意输入密码（1234）并登录，在Burp Suite界面截取到所输入的密码</p><p><img src="https://i.imgur.com/nvpT6QS.png" alt=""></p><p>5.将输入的密码（1234）选择并右键 Send to Intruder</p><p><img src="https://i.imgur.com/ktnhbWf.jpg" alt=""> </p><p>6.Burp Suitex选择Intruder,positions,clear,再选择输入的数字，Add</p><p><img src="https://i.imgur.com/PDlIqUW.png" alt=""></p><p>7.选择Intruder中Payloads，将之前存好的txt文档放进去<br><img src="https://i.imgur.com/wEyibFi.png" alt=""></p><p>8.选择最上方的Intruder，Start Attacks开始爆破<br><img src="https://i.imgur.com/kXBFvBq.png" alt=""></p><p>9.双击最上方的最长的，得到密码，复制密码到最初的（1234）处，选择Forward键，得到原始被改动的界面<br><img src="https://i.imgur.com/bNHGAYU.png" alt=""></p><p>#结束！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码爆破&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wizzlestick.github.io/2018/07/01/~$%E7%AC%AC%E4%BA%8C%E5%A4%A9%E4%BA%86/"/>
    <id>http://wizzlestick.github.io/2018/07/01/~$第二天了/</id>
    <published>2018-07-01T13:11:19.121Z</published>
    <updated>2018-07-01T13:11:19.121Z</updated>
    
    <content type="html"><![CDATA[<p>123123</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;123                                                   1 2 3                                                                            
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第二天了</title>
    <link href="http://wizzlestick.github.io/2018/07/01/%E7%AC%AC%E4%BA%8C%E5%A4%A9%E4%BA%86/"/>
    <id>http://wizzlestick.github.io/2018/07/01/第二天了/</id>
    <published>2018-07-01T13:10:58.000Z</published>
    <updated>2018-07-03T09:21:45.380Z</updated>
    
    <content type="html"><![CDATA[<p>Bin以及ob部分基础介绍<br><a id="more"></a></p><h1 id="BIN"><a href="#BIN" class="headerlink" title="BIN"></a>BIN</h1><p>介绍了其定义和特点，主要难度较大所以一定是要根据自己的兴趣合理选择并且坚持进行下去</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h2 id="RE-即逆向工程"><a href="#RE-即逆向工程" class="headerlink" title="RE 即逆向工程"></a>RE 即逆向工程</h2><p>分为攻和防</p><h3 id="攻"><a href="#攻" class="headerlink" title="攻"></a>攻</h3><p>指软件分析技术，具体包括恶意程序分析，破解盗版，打补丁，漏洞挖掘等</p><h3 id="防"><a href="#防" class="headerlink" title="防"></a>防</h3><p>指软件保护技术，具体包括代码混淆，代码虚拟化，代码扁平化等</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="软件漏洞"><a href="#软件漏洞" class="headerlink" title="软件漏洞"></a>软件漏洞</h3><p>挖掘-&gt;分析-&gt;利用-&gt;修补</p><h3 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h3><p>缓冲区溢出，整数溢出，格式化字符串，释放后使用</p><h2 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h2><p>*《核心原理 逆向工程》</p><h1 id="汇编语言初探"><a href="#汇编语言初探" class="headerlink" title="汇编语言初探"></a>汇编语言初探</h1><h2 id="C语言代码-汇编指令-机器码"><a href="#C语言代码-汇编指令-机器码" class="headerlink" title="C语言代码 汇编指令 机器码"></a>C语言代码 汇编指令 机器码</h2><p>机器只能识别机器码，C语言代码通过汇编指令转化成机器码</p><h2 id="数值表示"><a href="#数值表示" class="headerlink" title="数值表示"></a>数值表示</h2><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>二进制后有标志b，十进制是标志d，十六进制是标志h<br>Eg：01010 后面没有任何标志是默认为十进制</p><h3 id="字长"><a href="#字长" class="headerlink" title="字长"></a>字长</h3><p>Bit：位 </p><p>Byte：字节，与char对应，一个字节占8位</p><p>Word：一个Word占两个字节</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="8-1-1种常用寄存器"><a href="#8-1-1种常用寄存器" class="headerlink" title="8+1+1种常用寄存器"></a>8+1+1种常用寄存器</h3><p>EAX ECX EDX EBX ESP EBP ESI EDI 这八种可以存任何类型的东西，其中部分有其特殊使用功能</p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>ZF  标志上次运行结果是否为0 </p><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>MOV EAX,123H 表示将123h这个数值赋给EAX</p><h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><p>MOV EAX,EBX 表示将EBX里的东西赋给EAX</p><h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="# 直接寻址"></a># 直接寻址</h3><p>MOV EAX,[12345678h] 表示将12345678H这个地址里的内容赋给EAX</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>MOV EAX,[EBX] 表示将EBX里存的东西赋给EAX</p><p>总结：123h直接数字则就是表示数值，[ ]相当于c语言里的&amp;，即取括号里地址所对应的值</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h3><p>MOV：等同于copy，赋值 PUSH:入栈 ，POP：出栈， LEA：获取有效地址里的内容（等同于&amp;） ，等</p><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>(ADD：等同于+ ，SUB：等同于-)，(TNC，DEC)</p><p>eg：ADD EAX 1 =&gt; EAX+=1</p><p>INC EAX =&gt; EAX++</p><p>NEG:取反，CMP：比较，MUL：乘法运算 ，等</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>AND OR NOT XOR TEST，等</p><h1 id="Ollydbg"><a href="#Ollydbg" class="headerlink" title="Ollydbg"></a>Ollydbg</h1><p>直接将运行程序拖到代码区域即可</p><h2 id="区域展示"><a href="#区域展示" class="headerlink" title="区域展示"></a>区域展示</h2><p><img src="https://i.imgur.com/OnP8qpx.png" alt=""></p><p><img src="https://i.imgur.com/V972yoW.png" alt=""></p><p><img src="https://i.imgur.com/nZx4Hc1.png" alt=""></p><p><img src="https://i.imgur.com/6DlJlnZ.png" alt=""></p><h2 id="其他窗口"><a href="#其他窗口" class="headerlink" title="其他窗口"></a>其他窗口</h2><p>L(og):日志信息</p><p>E(xecute modules):模块信息</p><p>M(emory map):内存映射信息</p><p>T(hreads):线程信息</p><p>W(indows):窗口信息</p><p>H(andles):句柄信息</p><p>C:当前线程上下文</p><p>K:调用链信息，等等</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p><img src="https://i.imgur.com/RkbP8hf.png" alt=""></p><p><img src="https://i.imgur.com/Yt9yaNb.png" alt=""></p><h1 id="找到主函数的几种方法"><a href="#找到主函数的几种方法" class="headerlink" title="找到主函数的几种方法"></a>找到主函数的几种方法</h1><p>1.层层递进（F8）</p><p>一直重复按F8运行，当光标不在向下时说明此处是主函数或者是主函数的内部</p><p>2.字符串检索法</p><p>任意页面右键 -&gt; 搜索 -&gt; 智能搜索 （字符串可以检索的）</p><h1 id="修改输出"><a href="#修改输出" class="headerlink" title="修改输出"></a>修改输出</h1><p>1.找到主函数</p><p>2.在内存区选择Ctrl g,在弹框中输入找到的主函数的后缀的地址，确定</p><p>3.选中内存区中的主函数部分，Ctrl e，在弹框中修改掉输出即可</p><p>注：只能修改一次输出框，ctrl f2重新运行后结果还是原来的输出</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bin以及ob部分基础介绍&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
